[
    {
        "label": "autoslug.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "autoslug.fields",
        "description": "autoslug.fields",
        "detail": "autoslug.fields",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "applications.core.helpers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "applications.core.helpers",
        "description": "applications.core.helpers",
        "detail": "applications.core.helpers",
        "documentation": {}
    },
    {
        "label": "EventFileNameGenerator",
        "importPath": "applications.core.helpers",
        "description": "applications.core.helpers",
        "isExtraImport": true,
        "detail": "applications.core.helpers",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.contrib.gis.db.models.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.gis.db.models.fields",
        "description": "django.contrib.gis.db.models.fields",
        "detail": "django.contrib.gis.db.models.fields",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "mixer.backend.django",
        "description": "mixer.backend.django",
        "isExtraImport": true,
        "detail": "mixer.backend.django",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "EventHistory",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "FollowedHashTag",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "FollowedHashTag",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "isExtraImport": true,
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "isExtraImport": true,
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "CreateAuthenticatedOnly",
        "importPath": "applications.core.permissions",
        "description": "applications.core.permissions",
        "isExtraImport": true,
        "detail": "applications.core.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrReadOnly",
        "importPath": "applications.core.permissions",
        "description": "applications.core.permissions",
        "isExtraImport": true,
        "detail": "applications.core.permissions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "applications.core.choices",
        "description": "applications.core.choices",
        "isExtraImport": true,
        "detail": "applications.core.choices",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "applications.core.choices",
        "description": "applications.core.choices",
        "isExtraImport": true,
        "detail": "applications.core.choices",
        "documentation": {}
    },
    {
        "label": "EventDetailSerializer",
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "isExtraImport": true,
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "EventSimpleSerializer",
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "isExtraImport": true,
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "FollowedHashTagSerializer",
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "isExtraImport": true,
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "applications.core",
        "description": "applications.core",
        "isExtraImport": true,
        "detail": "applications.core",
        "documentation": {}
    },
    {
        "label": "CheckIfTicketProvidedIfPrivate",
        "importPath": "applications.core.validators",
        "description": "applications.core.validators",
        "isExtraImport": true,
        "detail": "applications.core.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "PyPDF2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRequestFactory",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "force_authenticate",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIRequestFactory",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "force_authenticate",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIRequestFactory",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "force_authenticate",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "errors_to_dict",
        "importPath": "applications.core.tests.utils",
        "description": "applications.core.tests.utils",
        "isExtraImport": true,
        "detail": "applications.core.tests.utils",
        "documentation": {}
    },
    {
        "label": "EventOwnListViewSet",
        "importPath": "applications.core.views",
        "description": "applications.core.views",
        "isExtraImport": true,
        "detail": "applications.core.views",
        "documentation": {}
    },
    {
        "label": "EventViewSet",
        "importPath": "applications.core.views",
        "description": "applications.core.views",
        "isExtraImport": true,
        "detail": "applications.core.views",
        "documentation": {}
    },
    {
        "label": "FollowedHashTagView",
        "importPath": "applications.core.views",
        "description": "applications.core.views",
        "isExtraImport": true,
        "detail": "applications.core.views",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "isExtraImport": true,
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "isExtraImport": true,
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "isExtraImport": true,
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "isExtraImport": true,
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "isExtraImport": true,
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "TicketTemplate",
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "isExtraImport": true,
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "D",
        "importPath": "django.contrib.gis.measure",
        "description": "django.contrib.gis.measure",
        "isExtraImport": true,
        "detail": "django.contrib.gis.measure",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "django.contrib.gis.db.models.functions",
        "description": "django.contrib.gis.db.models.functions",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db.models.functions",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "PointField",
        "importPath": "django.contrib.gis.db.models",
        "description": "django.contrib.gis.db.models",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db.models",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "PointField",
        "importPath": "drf_extra_fields.geo_fields",
        "description": "drf_extra_fields.geo_fields",
        "isExtraImport": true,
        "detail": "drf_extra_fields.geo_fields",
        "documentation": {}
    },
    {
        "label": "applications.tickets.helpers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "applications.tickets.helpers",
        "description": "applications.tickets.helpers",
        "detail": "applications.tickets.helpers",
        "documentation": {}
    },
    {
        "label": "TicketGenerator",
        "importPath": "applications.tickets.helpers",
        "description": "applications.tickets.helpers",
        "isExtraImport": true,
        "detail": "applications.tickets.helpers",
        "documentation": {}
    },
    {
        "label": "TicketTemplateSerializer",
        "importPath": "applications.tickets.serializers",
        "description": "applications.tickets.serializers",
        "isExtraImport": true,
        "detail": "applications.tickets.serializers",
        "documentation": {}
    },
    {
        "label": "TicketPurchaseSerializer",
        "importPath": "applications.tickets.serializers",
        "description": "applications.tickets.serializers",
        "isExtraImport": true,
        "detail": "applications.tickets.serializers",
        "documentation": {}
    },
    {
        "label": "TicketSerializer",
        "importPath": "applications.tickets.serializers",
        "description": "applications.tickets.serializers",
        "isExtraImport": true,
        "detail": "applications.tickets.serializers",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "Site",
        "importPath": "django.contrib.sites.models",
        "description": "django.contrib.sites.models",
        "isExtraImport": true,
        "detail": "django.contrib.sites.models",
        "documentation": {}
    },
    {
        "label": "Site",
        "importPath": "django.contrib.sites.models",
        "description": "django.contrib.sites.models",
        "isExtraImport": true,
        "detail": "django.contrib.sites.models",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "canvas",
        "importPath": "reportlab.pdfgen",
        "description": "reportlab.pdfgen",
        "isExtraImport": true,
        "detail": "reportlab.pdfgen",
        "documentation": {}
    },
    {
        "label": "canvas",
        "importPath": "reportlab.pdfgen",
        "description": "reportlab.pdfgen",
        "isExtraImport": true,
        "detail": "reportlab.pdfgen",
        "documentation": {}
    },
    {
        "label": "letter",
        "importPath": "reportlab.lib.pagesizes",
        "description": "reportlab.lib.pagesizes",
        "isExtraImport": true,
        "detail": "reportlab.lib.pagesizes",
        "documentation": {}
    },
    {
        "label": "letter",
        "importPath": "reportlab.lib.pagesizes",
        "description": "reportlab.lib.pagesizes",
        "isExtraImport": true,
        "detail": "reportlab.lib.pagesizes",
        "documentation": {}
    },
    {
        "label": "TicketSenderService",
        "importPath": "applications.tickets.services.ticket_sender_service",
        "description": "applications.tickets.services.ticket_sender_service",
        "isExtraImport": true,
        "detail": "applications.tickets.services.ticket_sender_service",
        "documentation": {}
    },
    {
        "label": "load_mock_image",
        "importPath": "applications.tickets.tests.utils",
        "description": "applications.tickets.tests.utils",
        "isExtraImport": true,
        "detail": "applications.tickets.tests.utils",
        "documentation": {}
    },
    {
        "label": "load_mock_pdf",
        "importPath": "applications.tickets.tests.utils",
        "description": "applications.tickets.tests.utils",
        "isExtraImport": true,
        "detail": "applications.tickets.tests.utils",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "IsOwner",
        "importPath": "applications.tickets.permissions",
        "description": "applications.tickets.permissions",
        "isExtraImport": true,
        "detail": "applications.tickets.permissions",
        "documentation": {}
    },
    {
        "label": "TicketAPIView",
        "importPath": "applications.tickets.views",
        "description": "applications.tickets.views",
        "isExtraImport": true,
        "detail": "applications.tickets.views",
        "documentation": {}
    },
    {
        "label": "TicketCheckerAPIView",
        "importPath": "applications.tickets.views",
        "description": "applications.tickets.views",
        "isExtraImport": true,
        "detail": "applications.tickets.views",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "phonenumber_field.modelfields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "PhoneNumberField",
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "isExtraImport": true,
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "ExtendedRegisterSerializer",
        "importPath": "applications.users.serializers",
        "description": "applications.users.serializers",
        "isExtraImport": true,
        "detail": "applications.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "applications.users.serializers",
        "description": "applications.users.serializers",
        "isExtraImport": true,
        "detail": "applications.users.serializers",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "applications.users",
        "description": "applications.users",
        "isExtraImport": true,
        "detail": "applications.users",
        "documentation": {}
    },
    {
        "label": "UserAPIView",
        "importPath": "applications.users.views",
        "description": "applications.users.views",
        "isExtraImport": true,
        "detail": "applications.users.views",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "importPath": "dj_rest_auth.registration.serializers",
        "description": "dj_rest_auth.registration.serializers",
        "isExtraImport": true,
        "detail": "dj_rest_auth.registration.serializers",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_random_secret_key",
        "importPath": "django.core.management.utils",
        "description": "django.core.management.utils",
        "isExtraImport": true,
        "detail": "django.core.management.utils",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0001_initial",
        "description": "applications.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Category\",\n            fields=[\n                (",
        "detail": "applications.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0002_rename_id_event_key",
        "description": "applications.core.migrations.0002_rename_id_event_key",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"event\",\n            old_name=\"id\",\n            new_name=\"key\",\n        ),",
        "detail": "applications.core.migrations.0002_rename_id_event_key",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0003_rename_key_event_id",
        "description": "applications.core.migrations.0003_rename_key_event_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0002_rename_id_event_key\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"event\",\n            old_name=\"key\",\n            new_name=\"ID\",\n        ),",
        "detail": "applications.core.migrations.0003_rename_key_event_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0004_rename_id_event_id",
        "description": "applications.core.migrations.0004_rename_id_event_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0003_rename_key_event_id\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"event\",\n            old_name=\"ID\",\n            new_name=\"id\",\n        ),",
        "detail": "applications.core.migrations.0004_rename_id_event_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0005_eventhistory_event",
        "description": "applications.core.migrations.0005_eventhistory_event",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0004_rename_id_event_id\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"eventhistory\",\n            name=\"event\",\n            field=models.ForeignKey(\n                null=True,",
        "detail": "applications.core.migrations.0005_eventhistory_event",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0006_auto_20211027_1949",
        "description": "applications.core.migrations.0006_auto_20211027_1949",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0005_eventhistory_event\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"event\",\n            name=\"is_active\",\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "applications.core.migrations.0006_auto_20211027_1949",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0007_auto_20211027_2059",
        "description": "applications.core.migrations.0007_auto_20211027_2059",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0006_auto_20211027_1949\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"eventticket\",\n            name=\"event\",\n        ),\n        migrations.CreateModel(",
        "detail": "applications.core.migrations.0007_auto_20211027_2059",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0008_auto_20211028_1819",
        "description": "applications.core.migrations.0008_auto_20211028_1819",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0007_auto_20211027_2059\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"event\",\n            name=\"image\",\n            field=models.ImageField(\n                null=True,",
        "detail": "applications.core.migrations.0008_auto_20211028_1819",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0009_remove_eventtemplate_event",
        "description": "applications.core.migrations.0009_remove_eventtemplate_event",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0008_auto_20211028_1819\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"eventtemplate\",\n            name=\"event\",\n        ),\n    ]",
        "detail": "applications.core.migrations.0009_remove_eventtemplate_event",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0010_delete_eventtemplate",
        "description": "applications.core.migrations.0010_delete_eventtemplate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0009_remove_eventtemplate_event\"),\n        (\"tickets\", \"0002_auto_20211029_0930\"),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name=\"EventTemplate\",\n        ),\n    ]",
        "detail": "applications.core.migrations.0010_delete_eventtemplate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0011_alter_event_image",
        "description": "applications.core.migrations.0011_alter_event_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0010_delete_eventtemplate\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"event\",\n            name=\"image\",\n            field=models.ImageField(\n                blank=True,",
        "detail": "applications.core.migrations.0011_alter_event_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0012_event_location",
        "description": "applications.core.migrations.0012_event_location",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0011_alter_event_image\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"event\",\n            name=\"location\",\n            field=django.contrib.gis.db.models.fields.PointField(null=True, srid=4326),\n        ),",
        "detail": "applications.core.migrations.0012_event_location",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0013_auto_20211030_1604",
        "description": "applications.core.migrations.0013_auto_20211030_1604",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0012_event_location\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"event\",\n            name=\"latitude\",\n        ),\n        migrations.RemoveField(",
        "detail": "applications.core.migrations.0013_auto_20211030_1604",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0014_alter_eventhistory_label",
        "description": "applications.core.migrations.0014_alter_eventhistory_label",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0013_auto_20211030_1604\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"eventhistory\",\n            name=\"label\",\n            field=models.CharField(\n                choices=[",
        "detail": "applications.core.migrations.0014_alter_eventhistory_label",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0015_auto_20211101_1057",
        "description": "applications.core.migrations.0015_auto_20211101_1057",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0014_alter_eventhistory_label\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"event\",\n            name=\"is_active\",\n        ),\n        migrations.AddField(",
        "detail": "applications.core.migrations.0015_auto_20211101_1057",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0016_alter_followedhashtag_user",
        "description": "applications.core.migrations.0016_alter_followedhashtag_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"core\", \"0015_auto_20211101_1057\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"followedhashtag\",\n            name=\"user\",\n            field=models.ForeignKey(",
        "detail": "applications.core.migrations.0016_alter_followedhashtag_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.core.migrations.0017_alter_event_category_delete_category",
        "description": "applications.core.migrations.0017_alter_event_category_delete_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0016_alter_followedhashtag_user\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"event\",\n            name=\"category\",\n            field=models.CharField(\n                choices=[",
        "detail": "applications.core.migrations.0017_alter_event_category_delete_category",
        "documentation": {}
    },
    {
        "label": "TestEventFileNameGenerator",
        "kind": 6,
        "importPath": "applications.core.tests.test_helpers",
        "description": "applications.core.tests.test_helpers",
        "peekOfCode": "class TestEventFileNameGenerator:\n    @patch(\"applications.core.helpers.uuid.uuid4\", return_value=\"2137\")\n    def test_generate_makes_new_filename_from_provided(self, _: MagicMock):\n        result = EventFileNameGenerator.generate(None, \"example.png\")\n        assert result == \"media/events/2137.png\"",
        "detail": "applications.core.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "TestEvent",
        "kind": 6,
        "importPath": "applications.core.tests.test_models",
        "description": "applications.core.tests.test_models",
        "peekOfCode": "class TestEvent:\n    def test_create_event(self):\n        entity = mixer.blend(\"core.Event\")\n        assert isinstance(entity, Event), \"Should create a Event instance\"\n@pytest.mark.django_db\nclass TestEventHistory:\n    def test_create_event_history(self):\n        entity = mixer.blend(\"core.EventHistory\")\n        assert isinstance(entity, EventHistory), \"Should create a EventHistory instance\"\n@pytest.mark.django_db",
        "detail": "applications.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestEventHistory",
        "kind": 6,
        "importPath": "applications.core.tests.test_models",
        "description": "applications.core.tests.test_models",
        "peekOfCode": "class TestEventHistory:\n    def test_create_event_history(self):\n        entity = mixer.blend(\"core.EventHistory\")\n        assert isinstance(entity, EventHistory), \"Should create a EventHistory instance\"\n@pytest.mark.django_db\nclass TestFollowedHashTag:\n    def test_create_followed_hashtag(self):\n        entity = mixer.blend(\"core.FollowedHashTag\")\n        assert isinstance(\n            entity, FollowedHashTag",
        "detail": "applications.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestFollowedHashTag",
        "kind": 6,
        "importPath": "applications.core.tests.test_models",
        "description": "applications.core.tests.test_models",
        "peekOfCode": "class TestFollowedHashTag:\n    def test_create_followed_hashtag(self):\n        entity = mixer.blend(\"core.FollowedHashTag\")\n        assert isinstance(\n            entity, FollowedHashTag\n        ), \"Should create a FollowedHashTag instance\"",
        "detail": "applications.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestIsOwnerOrReadOnly",
        "kind": 6,
        "importPath": "applications.core.tests.test_permissions",
        "description": "applications.core.tests.test_permissions",
        "peekOfCode": "class TestIsOwnerOrReadOnly:\n    def test_has_object_permission_returns_true_if_method_is_safe(self):\n        permission = IsOwnerOrReadOnly()\n        user = MagicMock(email=\"admin@gmail.com\", is_superuser=True)\n        other_user = MagicMock(email=\"test@gmail.com\")\n        req = MagicMock(method=\"GET\", user=user)\n        obj = MagicMock(promoter=other_user)\n        assert permission.has_object_permission(req, None, obj)\n    def test_has_object_permission_returns_true_if_user_is_superuser(self):\n        permission = IsOwnerOrReadOnly()",
        "detail": "applications.core.tests.test_permissions",
        "documentation": {}
    },
    {
        "label": "TestCreateAuthenticatedOnly",
        "kind": 6,
        "importPath": "applications.core.tests.test_permissions",
        "description": "applications.core.tests.test_permissions",
        "peekOfCode": "class TestCreateAuthenticatedOnly:\n    def test_has_permission_returns_true_if_method_is_not_post(self):\n        permission = CreateAuthenticatedOnly()\n        user = MagicMock(email=\"test@gmail.com\", is_authenticated=False)\n        req = MagicMock(method=\"GET\", user=user)\n        assert permission.has_permission(req, None)\n    def test_has_permission_returns_true_if_method_is_post_and_user_is_authenticated(\n        self,\n    ):\n        permission = CreateAuthenticatedOnly()",
        "detail": "applications.core.tests.test_permissions",
        "documentation": {}
    },
    {
        "label": "TestFollowedHashTagSerializer",
        "kind": 6,
        "importPath": "applications.core.tests.test_serializers",
        "description": "applications.core.tests.test_serializers",
        "peekOfCode": "class TestFollowedHashTagSerializer:\n    def test_validation_passes_if_data_is_correct(self):\n        instance = FollowedHashTagSerializer(data={\"value\": \"New hashtag\"})\n        assert instance.is_valid()\n    def test_validation_does_not_pass_if_value_is_missing(self):\n        instance = FollowedHashTagSerializer(data={})\n        assert not instance.is_valid()\n    @pytest.mark.django_db\n    def test_returns_data_in_correct_format(self):\n        hashtag = mixer.blend(\"core.FollowedHashTag\")",
        "detail": "applications.core.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestEventSimpleSerializer",
        "kind": 6,
        "importPath": "applications.core.tests.test_serializers",
        "description": "applications.core.tests.test_serializers",
        "peekOfCode": "class TestEventSimpleSerializer:\n    def test_validation_passes_if_data_is_correct(self):\n        instance = EventSimpleSerializer(data=get_event_detail_data())\n        assert instance.is_valid()\n    def test_validation_does_not_pass_if_data_is_invalid(self):\n        instance = EventSimpleSerializer(\n            data={\n                \"title\": \"new event\",\n                \"category\": Category.CONCERT,\n                \"is_free\": True,",
        "detail": "applications.core.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestEventDetailSerializer",
        "kind": 6,
        "importPath": "applications.core.tests.test_serializers",
        "description": "applications.core.tests.test_serializers",
        "peekOfCode": "class TestEventDetailSerializer:\n    def test_validation_passes_if_data_is_correct(self):\n        instance = EventDetailSerializer(data=get_event_detail_data())\n        assert instance.is_valid()\n    def test_validation_does_not_pass_if_data_is_missing(self):\n        data = get_event_detail_data()\n        del data[\"title\"]\n        instance = EventDetailSerializer(data=data)\n        assert not instance.is_valid()\n    def test_validation_does_not_pass_if_is_not_free_but_ticket_is_missing(self):",
        "detail": "applications.core.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "get_event_detail_data",
        "kind": 2,
        "importPath": "applications.core.tests.test_serializers",
        "description": "applications.core.tests.test_serializers",
        "peekOfCode": "def get_event_detail_data():\n    return {\n        \"title\": \"new event\",\n        \"description\": \"this is new event\",\n        \"location\": {\"latitude\": 3.14, \"longitude\": 21.37},\n        \"event_datetime\": datetime(2020, 10, 10, 10, 10, 10),\n        \"category\": Category.CONCERT,\n        \"is_free\": True,\n    }",
        "detail": "applications.core.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestCoreUrls",
        "kind": 6,
        "importPath": "applications.core.tests.test_urls",
        "description": "applications.core.tests.test_urls",
        "peekOfCode": "class TestCoreUrls:\n    def test_followed_hashtags_url_resolves(self):\n        url = reverse(\"followed-hashtags-list\")\n        assert resolve(url).func.cls == views.FollowedHashTagView  # type: ignore\n    def test_events_url_resolves(self):\n        url = reverse(\"events-list\")\n        assert resolve(url).func.cls == views.EventViewSet  # type: ignore\n    def test_own_events_url_resolves(self):\n        url = reverse(\"own-events-list\")\n        assert resolve(url).func.cls == views.EventOwnListViewSet  # type: ignore",
        "detail": "applications.core.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "TestCheckIfTicketProvidedIfPrivate",
        "kind": 6,
        "importPath": "applications.core.tests.test_validators",
        "description": "applications.core.tests.test_validators",
        "peekOfCode": "class TestCheckIfTicketProvidedIfPrivate:\n    def test_throws_error_if_event_is_not_free_and_ticket_is_missing(self):\n        validator = CheckIfTicketProvidedIfPrivate()\n        with pytest.raises(ValidationError):\n            validator({\"is_free\": False})\n            raise Exception(\"Error should have been thrown\")\n    def test_passes_if_is_free_is_not_provided(self):\n        validator = CheckIfTicketProvidedIfPrivate()\n        validator({})\n    def test_passes_if_event_is_not_free_but_ticket_is_provided(self):",
        "detail": "applications.core.tests.test_validators",
        "documentation": {}
    },
    {
        "label": "TestFollowedHashTagView",
        "kind": 6,
        "importPath": "applications.core.tests.test_views",
        "description": "applications.core.tests.test_views",
        "peekOfCode": "class TestFollowedHashTagView:\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.user = User.objects.create_user(\n            username=\"testuser\", password=\"password\", email=\"test@gmail.com\"\n        )\n        self.client = APIClient()\n        self.view = FollowedHashTagView.as_view(\n            {\"get\": \"list\", \"post\": \"create\", \"delete\": \"destroy\"}\n        )",
        "detail": "applications.core.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestEventOwnListViewSet",
        "kind": 6,
        "importPath": "applications.core.tests.test_views",
        "description": "applications.core.tests.test_views",
        "peekOfCode": "class TestEventOwnListViewSet:\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.user = User.objects.create_user(\n            username=\"testuser\", password=\"password\", email=\"test@gmail.com\"\n        )\n        self.client = APIClient()\n        self.view = EventOwnListViewSet.as_view({\"get\": \"list\"})\n    def test_view_throws_an_401_if_user_is_not_auth(self):\n        request = APIRequestFactory().get(\"\")",
        "detail": "applications.core.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestEventViewSet",
        "kind": 6,
        "importPath": "applications.core.tests.test_views",
        "description": "applications.core.tests.test_views",
        "peekOfCode": "class TestEventViewSet:\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.user = User.objects.create_user(\n            username=\"testuser\", password=\"password\", email=\"test@gmail.com\"\n        )\n        self.client = APIClient()\n        self.view = EventViewSet.as_view(\n            {\"get\": \"list\", \"post\": \"create\", \"delete\": \"destroy\", \"put\": \"update\"}\n        )",
        "detail": "applications.core.tests.test_views",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "applications.core.tests.test_views",
        "description": "applications.core.tests.test_views",
        "peekOfCode": "def create_event(title: str, location: Point, in_days=0, **kwargs):\n    return cast(\n        Event,\n        mixer.blend(\n            \"core.Event\",\n            title=title,\n            location=location,\n            event_datetime=datetime.now() + timedelta(days=in_days),\n            **kwargs,\n        ),",
        "detail": "applications.core.tests.test_views",
        "documentation": {}
    },
    {
        "label": "get_event_payload",
        "kind": 2,
        "importPath": "applications.core.tests.test_views",
        "description": "applications.core.tests.test_views",
        "peekOfCode": "def get_event_payload():\n    return {\n        \"title\": \"new event\",\n        \"description\": \"some description\",\n        \"location\": {\"latitude\": 13, \"longitude\": 33.89},\n        \"event_datetime\": datetime(2020, 10, 10),\n        \"category\": Category.MOVIE_FESTIVAL,\n    }\ndef create_superuser():\n    return User.objects.create_superuser(",
        "detail": "applications.core.tests.test_views",
        "documentation": {}
    },
    {
        "label": "create_superuser",
        "kind": 2,
        "importPath": "applications.core.tests.test_views",
        "description": "applications.core.tests.test_views",
        "peekOfCode": "def create_superuser():\n    return User.objects.create_superuser(\n        username=\"other\", password=\"123passWord\", email=\"super@gmail.com\"\n    )",
        "detail": "applications.core.tests.test_views",
        "documentation": {}
    },
    {
        "label": "errors_to_dict",
        "kind": 2,
        "importPath": "applications.core.tests.utils",
        "description": "applications.core.tests.utils",
        "peekOfCode": "def errors_to_dict(errors: Any):\n    return json.loads(json.dumps(errors))",
        "detail": "applications.core.tests.utils",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "applications.core.apps",
        "description": "applications.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"applications.core\"",
        "detail": "applications.core.apps",
        "documentation": {}
    },
    {
        "label": "HistoryLabel",
        "kind": 6,
        "importPath": "applications.core.choices",
        "description": "applications.core.choices",
        "peekOfCode": "class HistoryLabel(models.TextChoices):\n    MOVED = \"1\", \"Moved\"\n    CANCELED = \"2\", \"Canceled\"\n    DETAILS_CHANGED = \"3\", \"Details Changed\"\n    TOOK_PLACE = \"4\", \"Took place\"\nclass Category(models.TextChoices):\n    MUSIC_FESTIVAL = \"1\", \"Music Festival\"\n    ART_EXHIBITION = \"2\", \"Art Exhibition\"\n    CONCERT = \"3\", \"Concert\"\n    THEATRE_PERFORMANCE = \"4\", \"Theatre performance\"",
        "detail": "applications.core.choices",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "applications.core.choices",
        "description": "applications.core.choices",
        "peekOfCode": "class Category(models.TextChoices):\n    MUSIC_FESTIVAL = \"1\", \"Music Festival\"\n    ART_EXHIBITION = \"2\", \"Art Exhibition\"\n    CONCERT = \"3\", \"Concert\"\n    THEATRE_PERFORMANCE = \"4\", \"Theatre performance\"\n    MOVIE_FESTIVAL = \"5\", \"Movie Festival\"",
        "detail": "applications.core.choices",
        "documentation": {}
    },
    {
        "label": "EventFilterSet",
        "kind": 6,
        "importPath": "applications.core.filters",
        "description": "applications.core.filters",
        "peekOfCode": "class EventFilterSet(filters.FilterSet):\n    range = filters.NumberFilter(method=\"filter_by_range\")\n    keywords = filters.CharFilter(\"keywords\", method=\"filter_by_keywords\")\n    created_at = filters.DateRangeFilter()\n    updated_at = filters.DateRangeFilter()\n    event_datetime = filters.DateRangeFilter()\n    category = filters.NumberFilter(\"category\")\n    promoter = filters.NumberFilter(\"promoter\")\n    is_free = filters.BooleanFilter(\"is_free\")\n    class Meta:",
        "detail": "applications.core.filters",
        "documentation": {}
    },
    {
        "label": "EventOrderingFilter",
        "kind": 6,
        "importPath": "applications.core.filters",
        "description": "applications.core.filters",
        "peekOfCode": "class EventOrderingFilter(OrderingFilter):\n    \"\"\"\n    Default ordering way for events list.\n    That orders by time expiration and if user\n    provided coordinates, by distance either.\n    \"\"\"\n    def filter_queryset(self, request: Request, queryset: QuerySet, view):\n        \"\"\"\n        Order by expiration time. Expired events go to the end of a list.\n        \"\"\"",
        "detail": "applications.core.filters",
        "documentation": {}
    },
    {
        "label": "EventFileNameGenerator",
        "kind": 6,
        "importPath": "applications.core.helpers",
        "description": "applications.core.helpers",
        "peekOfCode": "class EventFileNameGenerator:\n    @staticmethod\n    def generate(_, filename: str):\n        extension = filename.split(\".\")[-1]\n        return \"media/events/\" + str(uuid.uuid4()) + \".\" + extension",
        "detail": "applications.core.helpers",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "peekOfCode": "class Event(models.Model):\n    \"\"\"\n    Main Event model.\n    It includes all necessary data for schedule a meeting (place, time etc.)\n    This objects have own images and history additionally.\n    If is_private = True, secret key is generated as random key for sharing by link,\n    If is_free = True, tickets are necessary and are stored in tickets table.\n    \"\"\"\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4)\n    title = models.CharField(max_length=128)",
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "EventHistory",
        "kind": 6,
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "peekOfCode": "class EventHistory(models.Model):\n    \"\"\"\n    Histories for events.\n    Include all additional information for client about current state of event,\n    (i.e. event is canceled).\n    Label field includes the name of that log.\n    \"\"\"\n    label = models.CharField(max_length=1, choices=HistoryLabel.choices)\n    text = models.CharField(max_length=256, blank=True, null=True)\n    event = models.ForeignKey(",
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "FollowedHashTag",
        "kind": 6,
        "importPath": "applications.core.models",
        "description": "applications.core.models",
        "peekOfCode": "class FollowedHashTag(models.Model):\n    \"\"\"\n    Authorized users can point hashtags that belong to events\n    for getting easy access and find quickly new events.\n    \"\"\"\n    value = models.CharField(max_length=128)\n    user = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"followed_hashtags\"\n    )\n    def __str__(self):",
        "detail": "applications.core.models",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrReadOnly",
        "kind": 6,
        "importPath": "applications.core.permissions",
        "description": "applications.core.permissions",
        "peekOfCode": "class IsOwnerOrReadOnly(permissions.BasePermission):\n    def has_object_permission(self, request, view, obj):\n        # Read only for everybody\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        # Edit mode only for author (promoter) of event or admin user\n        return request.user.is_superuser or obj.promoter == request.user\nclass CreateAuthenticatedOnly(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_authenticated if request.method == \"POST\" else True",
        "detail": "applications.core.permissions",
        "documentation": {}
    },
    {
        "label": "CreateAuthenticatedOnly",
        "kind": 6,
        "importPath": "applications.core.permissions",
        "description": "applications.core.permissions",
        "peekOfCode": "class CreateAuthenticatedOnly(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_authenticated if request.method == \"POST\" else True",
        "detail": "applications.core.permissions",
        "documentation": {}
    },
    {
        "label": "_EventHistorySerializer",
        "kind": 6,
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "peekOfCode": "class _EventHistorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = EventHistory\n        exclude = (\"id\",)\n        extra_kwargs = {\"event\": {\"write_only\": True}}\nclass FollowedHashTagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = FollowedHashTag\n        fields = (\"value\",)\nclass EventSimpleSerializer(serializers.ModelSerializer):",
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "FollowedHashTagSerializer",
        "kind": 6,
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "peekOfCode": "class FollowedHashTagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = FollowedHashTag\n        fields = (\"value\",)\nclass EventSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = (\n            \"id\",\n            \"title\",",
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "EventSimpleSerializer",
        "kind": 6,
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "peekOfCode": "class EventSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = (\n            \"id\",\n            \"title\",\n            \"location\",\n            \"event_datetime\",\n            \"category\",\n            \"is_free\",",
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "EventDetailSerializer",
        "kind": 6,
        "importPath": "applications.core.serializers",
        "description": "applications.core.serializers",
        "peekOfCode": "class EventDetailSerializer(serializers.ModelSerializer):\n    ticket = TicketTemplateSerializer(write_only=True, required=False)\n    histories = _EventHistorySerializer(many=True, read_only=True)\n    location = PointField()\n    class Meta:\n        model = Event\n        fields = \"__all__\"\n        read_only_fields = (\n            \"created_at\",\n            \"updated_at\",",
        "detail": "applications.core.serializers",
        "documentation": {}
    },
    {
        "label": "send_emails",
        "kind": 2,
        "importPath": "applications.core.tasks",
        "description": "applications.core.tasks",
        "peekOfCode": "def send_emails(**kwargs):\n    \"\"\"\n    This function is the cron system for automatically sending\n    emails in users every day with new events that may interest them.\n    It triggers on 1 time every day and looks for events that were\n    added in last 24 hours.\n    After retrieve a list of this events looks for a matches with\n    followed hashtags based on relations of their with user.\n    Result is a list of events that is submitting to user as email message.\n    \"\"\"",
        "detail": "applications.core.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "applications.core.urls",
        "description": "applications.core.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(\n    \"followed-hashtags\", views.FollowedHashTagView, basename=\"followed-hashtags\"\n)\nrouter.register(\"events\", views.EventViewSet, basename=\"events\")\nrouter.register(\"own-events\", views.EventOwnListViewSet, basename=\"own-events\")\nurlpatterns = [path(\"\", include(router.urls))]",
        "detail": "applications.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "applications.core.urls",
        "description": "applications.core.urls",
        "peekOfCode": "urlpatterns = [path(\"\", include(router.urls))]",
        "detail": "applications.core.urls",
        "documentation": {}
    },
    {
        "label": "CheckIfTicketProvidedIfPrivate",
        "kind": 6,
        "importPath": "applications.core.validators",
        "description": "applications.core.validators",
        "peekOfCode": "class CheckIfTicketProvidedIfPrivate:\n    def __call__(self, value: dict):\n        if \"is_free\" in value and not value[\"is_free\"] and \"ticket\" not in value:\n            raise serializers.ValidationError(\n                \"If you are passing is_free field, you must pass ticket field too\"\n            )",
        "detail": "applications.core.validators",
        "documentation": {}
    },
    {
        "label": "FollowedHashTagView",
        "kind": 6,
        "importPath": "applications.core.views",
        "description": "applications.core.views",
        "peekOfCode": "class FollowedHashTagView(\n    mixins.ListModelMixin,\n    mixins.CreateModelMixin,\n    mixins.DestroyModelMixin,\n    viewsets.GenericViewSet,\n):\n    serializer_class = FollowedHashTagSerializer\n    permission_classes = (IsAuthenticated,)\n    def get_queryset(self):  # type: ignore\n        return FollowedHashTag.objects.filter(user=self.request.user)",
        "detail": "applications.core.views",
        "documentation": {}
    },
    {
        "label": "EventViewSet",
        "kind": 6,
        "importPath": "applications.core.views",
        "description": "applications.core.views",
        "peekOfCode": "class EventViewSet(viewsets.ModelViewSet):\n    queryset = Event.objects.filter(is_private=False, canceled=False, took_place=False)\n    permission_classes = (\n        IsOwnerOrReadOnly,\n        CreateAuthenticatedOnly,\n    )\n    filter_backends = (\n        filters.DjangoFilterBackend,\n        EventOrderingFilter,\n    )",
        "detail": "applications.core.views",
        "documentation": {}
    },
    {
        "label": "EventOwnListViewSet",
        "kind": 6,
        "importPath": "applications.core.views",
        "description": "applications.core.views",
        "peekOfCode": "class EventOwnListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n    serializer_class = EventSimpleSerializer\n    permission_classes = (IsAuthenticated,)\n    def get_queryset(self):  # type: ignore\n        return Event.objects.filter(promoter=self.request.user)",
        "detail": "applications.core.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0001_initial",
        "description": "applications.tickets.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"core\", \"0008_auto_20211028_1819\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Ticket\",\n            fields=[\n                (",
        "detail": "applications.tickets.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0002_auto_20211029_0930",
        "description": "applications.tickets.migrations.0002_auto_20211029_0930",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0009_remove_eventtemplate_event\"),\n        (\"tickets\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"TicketTemplate\",\n            fields=[\n                (",
        "detail": "applications.tickets.migrations.0002_auto_20211029_0930",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0003_rename_template_tickettemplate__file",
        "description": "applications.tickets.migrations.0003_rename_template_tickettemplate__file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tickets\", \"0002_auto_20211029_0930\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"tickettemplate\",\n            old_name=\"template\",\n            new_name=\"_file\",\n        ),",
        "detail": "applications.tickets.migrations.0003_rename_template_tickettemplate__file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0004_auto_20211029_1451",
        "description": "applications.tickets.migrations.0004_auto_20211029_1451",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tickets\", \"0003_rename_template_tickettemplate__file\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"ticket\",\n            old_name=\"sold\",\n            new_name=\"is_sold\",\n        ),",
        "detail": "applications.tickets.migrations.0004_auto_20211029_1451",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0005_rename__file_tickettemplate_file",
        "description": "applications.tickets.migrations.0005_rename__file_tickettemplate_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tickets\", \"0004_auto_20211029_1451\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"tickettemplate\",\n            old_name=\"_file\",\n            new_name=\"file\",\n        ),",
        "detail": "applications.tickets.migrations.0005_rename__file_tickettemplate_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0006_rename_file_tickettemplate__file",
        "description": "applications.tickets.migrations.0006_rename_file_tickettemplate__file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tickets\", \"0005_rename__file_tickettemplate_file\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"tickettemplate\",\n            old_name=\"file\",\n            new_name=\"_file\",\n        ),",
        "detail": "applications.tickets.migrations.0006_rename_file_tickettemplate__file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.tickets.migrations.0007_rename__file_tickettemplate_file",
        "description": "applications.tickets.migrations.0007_rename__file_tickettemplate_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tickets\", \"0006_rename_file_tickettemplate__file\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"tickettemplate\",\n            old_name=\"_file\",\n            new_name=\"file\",\n        ),",
        "detail": "applications.tickets.migrations.0007_rename__file_tickettemplate_file",
        "documentation": {}
    },
    {
        "label": "TicketSenderService",
        "kind": 6,
        "importPath": "applications.tickets.services.ticket_sender_service",
        "description": "applications.tickets.services.ticket_sender_service",
        "peekOfCode": "class TicketSenderService:\n    \"\"\"\n    This class is up to sending ticket file to client's email address.\n    It generates unique QR code (based on id of ticket), and pdf file\n    (based on selected template file). Then it merges this 2 files saved\n    in media/tmp with unique names, and sends the result to provided email\n    address.\n    \"\"\"\n    def send(self, email: str, ticket: Ticket):\n        # get pdf file from template",
        "detail": "applications.tickets.services.ticket_sender_service",
        "documentation": {}
    },
    {
        "label": "TicketService",
        "kind": 6,
        "importPath": "applications.tickets.services.ticket_service",
        "description": "applications.tickets.services.ticket_service",
        "peekOfCode": "class TicketService:\n    def mark_as_used(self, ticket: Ticket):\n        ticket.is_used = True\n        ticket.save()\n    def mark_as_sold(self, ticket: Ticket):\n        ticket.is_sold = True\n        ticket.save()\n    def checkout(self, email: str, ticket: Ticket):\n        sender_service = TicketSenderService()\n        sender_service.send(email, ticket)",
        "detail": "applications.tickets.services.ticket_service",
        "documentation": {}
    },
    {
        "label": "TestTicketGenerator",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_helpers",
        "description": "applications.tickets.tests.test_helpers",
        "peekOfCode": "class TestTicketGenerator:\n    def test_should_generate_tickets_returns_true_if_event_is_not_free(self):\n        generator = helpers.TicketGenerator({\"is_free\": False})\n        assert generator.should_generate_tickets()\n    def test_should_generate_tickets_returns_false_if_event_is_free(self):\n        generator = helpers.TicketGenerator({\"is_free\": True})\n        assert not generator.should_generate_tickets()\n    @pytest.mark.django_db\n    def test_generate_tickets_creates_ticket_template(self):\n        template = SimpleUploadedFile(\"test_file.pdf\", b\"file_content\")",
        "detail": "applications.tickets.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "TestTicketWithQRCodeSender",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_helpers",
        "description": "applications.tickets.tests.test_helpers",
        "peekOfCode": "class TestTicketWithQRCodeSender:\n    email_mock = MagicMock()\n    @pytest.fixture(autouse=True)\n    def remove_tmp_files(self):\n        files = [i for i in os.listdir(\"media/tmp/\") if i != \".gitignore\"]\n        for file in files:\n            os.unlink(f\"media/tmp/{file}\")\n    @pytest.mark.django_db\n    def test_send_does_not_leave_redundant_media_tmp_files(self):\n        ticket: Ticket = mixer.blend(\"tickets.Ticket\")",
        "detail": "applications.tickets.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "TestTicketTemplate",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_models",
        "description": "applications.tickets.tests.test_models",
        "peekOfCode": "class TestTicketTemplate:\n    def test_create_ticket_template(self):\n        entity = mixer.blend(\"tickets.TicketTemplate\")\n        assert isinstance(entity, TicketTemplate)\n    def test_fail_ticket_template_if_file_is_not_pdf(self):\n        with pytest.raises(ValidationError):\n            entity = mixer.blend(\"tickets.TicketTemplate\")\n            entity.file = SimpleUploadedFile(\"test_file.txt\", b\"file_content\")  # type: ignore\n            entity.full_clean()  # type: ignore\n            raise Exception(\"Error should have been thrown\")",
        "detail": "applications.tickets.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestTicket",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_models",
        "description": "applications.tickets.tests.test_models",
        "peekOfCode": "class TestTicket:\n    def test_create_ticket(self):\n        entity = mixer.blend(\"tickets.Ticket\")\n        assert isinstance(entity.id, uuid.UUID), \"Should create a Ticket instance\"  # type: ignore",
        "detail": "applications.tickets.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestIsOwnerPermission",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_permissions",
        "description": "applications.tickets.tests.test_permissions",
        "peekOfCode": "class TestIsOwnerPermission:\n    @pytest.fixture(autouse=True)\n    def req(self):\n        req = MagicMock()\n        req.user = {\"email\": \"test@gamil.com\"}\n        return req\n    @pytest.fixture(autouse=True)\n    def obj(self):\n        return MagicMock()\n    def test_has_object_permission_returns_true_if_promoter_is_user(",
        "detail": "applications.tickets.tests.test_permissions",
        "documentation": {}
    },
    {
        "label": "TestTicketPurchaseSerializer",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_serializers",
        "description": "applications.tickets.tests.test_serializers",
        "peekOfCode": "class TestTicketPurchaseSerializer:\n    def test_validation_passes_if_email_is_provided(self):\n        instance = TicketPurchaseSerializer(data={\"email\": \"test@gamil.com\"})\n        assert instance.is_valid()\n    def test_validation_does_not_pass_if_email_is_missing(self):\n        instance = TicketPurchaseSerializer(data={})\n        assert not instance.is_valid()\n    def test_validation_does_not_pass_if_email_is_not_valid_email(self):\n        instance = TicketPurchaseSerializer(data={\"email\": \"aaa\"})\n        assert not instance.is_valid()",
        "detail": "applications.tickets.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestTicketSerializer",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_serializers",
        "description": "applications.tickets.tests.test_serializers",
        "peekOfCode": "class TestTicketSerializer:\n    def test_validation_passes_if_data_is_valid(self):\n        instance = TicketSerializer(data={\"is_used\": True, \"is_sold\": True})\n        assert instance.is_valid()\n    @pytest.mark.django_db\n    def test_returns_object_without_template(self):\n        ticket: Ticket = mixer.blend(\"tickets.Ticket\")\n        instance = TicketSerializer(instance=ticket)\n        assert \"template\" not in instance.data",
        "detail": "applications.tickets.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestTicketsUrls",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_urls",
        "description": "applications.tickets.tests.test_urls",
        "peekOfCode": "class TestTicketsUrls:\n    def test_event_tickets_url_resolves(self):\n        url = reverse(\"events-tickets\", args=[\"event123\"])\n        assert resolve(url).func.view_class == views.TicketAPIView  # type: ignore\n    def test_event_tickets_checker_url_resolves(self):\n        url = reverse(\"events-tickets-checker\", args=[\"event123\", \"ticket123\"])\n        assert resolve(url).func.view_class == views.TicketCheckerAPIView  # type: ignore",
        "detail": "applications.tickets.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "TestTicketCheckerAPIView",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_views",
        "description": "applications.tickets.tests.test_views",
        "peekOfCode": "class TestTicketCheckerAPIView:\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.user = User.objects.create_user(username=\"testuser\", password=\"password\")\n        self.client = APIClient()\n    @pytest.fixture\n    def entities(self):\n        event: Event = mixer.blend(\"core.Event\")\n        template: TicketTemplate = mixer.blend(\"tickets.TicketTemplate\")\n        template.event = event",
        "detail": "applications.tickets.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestTicketAPIView",
        "kind": 6,
        "importPath": "applications.tickets.tests.test_views",
        "description": "applications.tickets.tests.test_views",
        "peekOfCode": "class TestTicketAPIView:\n    ticket_sender_cls = MagicMock()\n    sender_mock: MagicMock\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.sender_mock = MagicMock()\n        ticket_sender_cls: MagicMock = self.ticket_sender_cls\n        ticket_sender_cls.return_value = self.sender_mock\n    @pytest.fixture\n    def entities(self):",
        "detail": "applications.tickets.tests.test_views",
        "documentation": {}
    },
    {
        "label": "load_mock_pdf",
        "kind": 2,
        "importPath": "applications.tickets.tests.utils",
        "description": "applications.tickets.tests.utils",
        "peekOfCode": "def load_mock_pdf() -> bytes:\n    reader = PdfFileReader(f\"{_dir}/fixtures/document.pdf\")\n    return cast(bytes, reader.stream)\ndef load_mock_image():\n    return Image.open(f\"{_dir}/fixtures/qr.png\")",
        "detail": "applications.tickets.tests.utils",
        "documentation": {}
    },
    {
        "label": "load_mock_image",
        "kind": 2,
        "importPath": "applications.tickets.tests.utils",
        "description": "applications.tickets.tests.utils",
        "peekOfCode": "def load_mock_image():\n    return Image.open(f\"{_dir}/fixtures/qr.png\")",
        "detail": "applications.tickets.tests.utils",
        "documentation": {}
    },
    {
        "label": "_dir",
        "kind": 5,
        "importPath": "applications.tickets.tests.utils",
        "description": "applications.tickets.tests.utils",
        "peekOfCode": "_dir = os.path.dirname(os.path.realpath(__file__))\ndef load_mock_pdf() -> bytes:\n    reader = PdfFileReader(f\"{_dir}/fixtures/document.pdf\")\n    return cast(bytes, reader.stream)\ndef load_mock_image():\n    return Image.open(f\"{_dir}/fixtures/qr.png\")",
        "detail": "applications.tickets.tests.utils",
        "documentation": {}
    },
    {
        "label": "TicketsConfig",
        "kind": 6,
        "importPath": "applications.tickets.apps",
        "description": "applications.tickets.apps",
        "peekOfCode": "class TicketsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"applications.tickets\"",
        "detail": "applications.tickets.apps",
        "documentation": {}
    },
    {
        "label": "TicketGenerator",
        "kind": 6,
        "importPath": "applications.tickets.helpers",
        "description": "applications.tickets.helpers",
        "peekOfCode": "class TicketGenerator:\n    \"\"\"\n    This class generates tickets with provided quantity by user\n    if it is necessary (that means when user provided 'is_free' field\n    and is set on False). User has to pass template file and quantity\n    of tickets to generate and in this point generates them.\n    \"\"\"\n    def __init__(self, data: Dict[str, Any]):\n        self.__data = data\n    def should_generate_tickets(self):",
        "detail": "applications.tickets.helpers",
        "documentation": {}
    },
    {
        "label": "TicketWithQRCodeSender",
        "kind": 6,
        "importPath": "applications.tickets.helpers",
        "description": "applications.tickets.helpers",
        "peekOfCode": "class TicketWithQRCodeSender:\n    \"\"\"\n    This class is up to sending ticket file to client's email address.\n    It generates unique QR code (based on id of ticket), and pdf file\n    (based on selected template file). Then it merges this 2 files saved\n    in media/tmp with unique names, and sends the result to provided email\n    address.\n    \"\"\"\n    def send(self, email: str, obj: Ticket):\n        # get pdf file from template",
        "detail": "applications.tickets.helpers",
        "documentation": {}
    },
    {
        "label": "TicketTemplate",
        "kind": 6,
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "peekOfCode": "class TicketTemplate(models.Model):\n    \"\"\"\n    If event is private is necessary to get a ticket before arrive to event\n    Each ticket is generated based on template file with unique key as id of that ticket.\n    The quantity of tickets depends on promoter of event.\n    \"\"\"\n    event = models.OneToOneField(Event, on_delete=models.CASCADE)\n    file = models.FileField(\n        upload_to=\"media/tickets/\", validators=[FileExtensionValidator([\"pdf\"])]\n    )",
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "kind": 6,
        "importPath": "applications.tickets.models",
        "description": "applications.tickets.models",
        "peekOfCode": "class Ticket(models.Model):\n    id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False, unique=True\n    )\n    template = models.ForeignKey(TicketTemplate, on_delete=models.CASCADE)\n    is_used = models.BooleanField(default=False)\n    is_sold = models.BooleanField(default=False)\n    def __str__(self):\n        return f\"Ticket {self.id}\"",
        "detail": "applications.tickets.models",
        "documentation": {}
    },
    {
        "label": "IsOwner",
        "kind": 6,
        "importPath": "applications.tickets.permissions",
        "description": "applications.tickets.permissions",
        "peekOfCode": "class IsOwner(permissions.BasePermission):\n    def has_object_permission(self, request, view, obj):\n        return obj.promoter == request.user",
        "detail": "applications.tickets.permissions",
        "documentation": {}
    },
    {
        "label": "TicketPurchaseSerializer",
        "kind": 6,
        "importPath": "applications.tickets.serializers",
        "description": "applications.tickets.serializers",
        "peekOfCode": "class TicketPurchaseSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\nclass TicketSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ticket\n        exclude = (\"template\",)\nclass TicketTemplateSerializer(serializers.ModelSerializer):\n    quantity = serializers.IntegerField(\n        required=True, validators=[MinValueValidator(0)]\n    )",
        "detail": "applications.tickets.serializers",
        "documentation": {}
    },
    {
        "label": "TicketSerializer",
        "kind": 6,
        "importPath": "applications.tickets.serializers",
        "description": "applications.tickets.serializers",
        "peekOfCode": "class TicketSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ticket\n        exclude = (\"template\",)\nclass TicketTemplateSerializer(serializers.ModelSerializer):\n    quantity = serializers.IntegerField(\n        required=True, validators=[MinValueValidator(0)]\n    )\n    class Meta:\n        model = TicketTemplate",
        "detail": "applications.tickets.serializers",
        "documentation": {}
    },
    {
        "label": "TicketTemplateSerializer",
        "kind": 6,
        "importPath": "applications.tickets.serializers",
        "description": "applications.tickets.serializers",
        "peekOfCode": "class TicketTemplateSerializer(serializers.ModelSerializer):\n    quantity = serializers.IntegerField(\n        required=True, validators=[MinValueValidator(0)]\n    )\n    class Meta:\n        model = TicketTemplate\n        fields = (\n            \"file\",\n            \"quantity\",\n        )",
        "detail": "applications.tickets.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "applications.tickets.urls",
        "description": "applications.tickets.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"events/<str:event_id>/tickets/\",\n        views.TicketAPIView.as_view(),\n        name=\"events-tickets\",\n    ),\n    path(\n        \"events/<str:event_id>/tickets/<str:ticket_id>/\",\n        views.TicketCheckerAPIView.as_view(),\n        name=\"events-tickets-checker\",",
        "detail": "applications.tickets.urls",
        "documentation": {}
    },
    {
        "label": "TicketCheckerAPIView",
        "kind": 6,
        "importPath": "applications.tickets.views",
        "description": "applications.tickets.views",
        "peekOfCode": "class TicketCheckerAPIView(APIView):\n    serializer_class = TicketSerializer\n    permission_classes = (IsAuthenticated,)\n    def get_object(self, event_id, ticket_id):\n        try:\n            return Ticket.objects.get(\n                id=ticket_id, template__event=event_id, is_used=False, is_sold=True\n            )\n        except Exception as exc:\n            raise Http404 from exc",
        "detail": "applications.tickets.views",
        "documentation": {}
    },
    {
        "label": "TicketAPIView",
        "kind": 6,
        "importPath": "applications.tickets.views",
        "description": "applications.tickets.views",
        "peekOfCode": "class TicketAPIView(APIView):\n    serializer_class = TicketPurchaseSerializer\n    permission_classes = (AllowAny,)\n    def get_object(self, event_id):\n        \"\"\"\n        Get first available ticket that belongs to the chosen event\n        \"\"\"\n        return Ticket.objects.get(template__event=event_id, is_sold=False)\n    def post(self, request, event_id):\n        \"\"\"",
        "detail": "applications.tickets.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.users.migrations.0001_initial",
        "description": "applications.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (",
        "detail": "applications.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.users.migrations.0002_user_avatar",
        "description": "applications.users.migrations.0002_user_avatar",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"users\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"avatar\",\n            field=models.ImageField(null=True, upload_to=\"media/avatars\"),\n        ),",
        "detail": "applications.users.migrations.0002_user_avatar",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.users.migrations.0003_alter_user_avatar",
        "description": "applications.users.migrations.0003_alter_user_avatar",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"users\", \"0002_user_avatar\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"avatar\",\n            field=models.ImageField(blank=True, null=True, upload_to=\"media/avatars\"),\n        ),",
        "detail": "applications.users.migrations.0003_alter_user_avatar",
        "documentation": {}
    },
    {
        "label": "TestUser",
        "kind": 6,
        "importPath": "applications.users.tests.test_models",
        "description": "applications.users.tests.test_models",
        "peekOfCode": "class TestUser:\n    def test_create_user(self):\n        entity = mixer.blend(\"users.User\")\n        assert isinstance(entity, User), \"Should create a User instance\"  # type: ignore",
        "detail": "applications.users.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestExtendedRegisterSerializer",
        "kind": 6,
        "importPath": "applications.users.tests.test_serializers",
        "description": "applications.users.tests.test_serializers",
        "peekOfCode": "class TestExtendedRegisterSerializer:\n    @pytest.mark.django_db\n    def test_passes_if_data_is_valid(self):\n        data = {\n            \"username\": \"piklop\",\n            \"password1\": \"111qrtp9b3d5\",\n            \"password2\": \"111qrtp9b3d5\",\n            \"email\": \"test@gmail.com\",\n            \"phone_number\": \"499038195\",\n            \"country\": \"USA\",",
        "detail": "applications.users.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestUserSerializer",
        "kind": 6,
        "importPath": "applications.users.tests.test_serializers",
        "description": "applications.users.tests.test_serializers",
        "peekOfCode": "class TestUserSerializer:\n    @pytest.mark.django_db\n    def test_returns_object(self):\n        user: User = mixer.blend(\"users.User\")\n        instance = UserSerializer(instance=user)\n        assert \"email\" in instance.data\n        assert \"phone_number\" in instance.data\n        assert \"is_superuser\" in instance.data\n        assert \"country\" in instance.data\n        assert \"state\" in instance.data",
        "detail": "applications.users.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "TestUsersUrls",
        "kind": 6,
        "importPath": "applications.users.tests.test_urls",
        "description": "applications.users.tests.test_urls",
        "peekOfCode": "class TestUsersUrls:\n    def test_user_url_resolves(self):\n        url = reverse(\"user\")\n        assert resolve(url).func.view_class == views.UserAPIView  # type: ignore",
        "detail": "applications.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "TestUserAPIView",
        "kind": 6,
        "importPath": "applications.users.tests.test_views",
        "description": "applications.users.tests.test_views",
        "peekOfCode": "class TestUserAPIView:\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.user = User.objects.create_user(\n            username=\"testuser\", password=\"password\", email=\"test@gmail.com\"\n        )\n        self.client = APIClient()\n    def test_get_throws_an_401_if_user_is_not_auth(self):\n        request = APIRequestFactory().get(\"\")\n        view = UserAPIView.as_view()",
        "detail": "applications.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "applications.users.apps",
        "description": "applications.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"applications.users\"",
        "detail": "applications.users.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "applications.users.models",
        "description": "applications.users.models",
        "peekOfCode": "class User(AbstractUser):\n    USERNAME_FIELD = \"username\"\n    EMAIL_FIELD = \"email\"\n    phone_number = PhoneNumberField(null=True, default=\"\")\n    country = models.CharField(max_length=128)\n    state = models.CharField(max_length=128)\n    city = models.CharField(max_length=128)\n    street = models.CharField(max_length=128)\n    home_nb = models.CharField(max_length=16)\n    zip_code = models.CharField(max_length=16)",
        "detail": "applications.users.models",
        "documentation": {}
    },
    {
        "label": "ExtendedRegisterSerializer",
        "kind": 6,
        "importPath": "applications.users.serializers",
        "description": "applications.users.serializers",
        "peekOfCode": "class ExtendedRegisterSerializer(RegisterSerializer):\n    def get_cleaned_data(self):\n        super().get_cleaned_data()\n        assert isinstance(self.validated_data, dict)\n        return {\n            \"username\": self.validated_data.get(\"username\", \"\"),\n            \"password1\": self.validated_data.get(\"password1\", \"\"),\n            \"password2\": self.validated_data.get(\"password2\", \"\"),\n            \"email\": self.validated_data.get(\"email\", \"\"),\n            \"phone_number\": self.validated_data.get(\"phone_number\", \"\"),",
        "detail": "applications.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "applications.users.serializers",
        "description": "applications.users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = (\n            \"email\",\n            \"phone_number\",\n            \"is_superuser\",\n            \"country\",\n            \"state\",\n            \"city\",",
        "detail": "applications.users.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "applications.users.urls",
        "description": "applications.users.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"user/\", views.UserAPIView.as_view(), name=\"user\"),\n    path(\"registration/\", include(\"dj_rest_auth.registration.urls\")),\n    path(\"password/\", include(\"django.contrib.auth.urls\")),\n    path(\"\", include(\"dj_rest_auth.urls\")),\n]",
        "detail": "applications.users.urls",
        "documentation": {}
    },
    {
        "label": "UserAPIView",
        "kind": 6,
        "importPath": "applications.users.views",
        "description": "applications.users.views",
        "peekOfCode": "class UserAPIView(generics.RetrieveUpdateAPIView):\n    serializer_class = UserSerializer\n    permission_classes = (IsAuthenticated,)\n    def get_object(self, **_):\n        return self.request.user",
        "detail": "applications.users.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"backend.settings\")\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = get_random_secret_key()\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "SECRET_KEY = get_random_secret_key()\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"applications.users\",\n    \"applications.core\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",\n]",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"static/templates/\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"static/templates/\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": \"\",\n    }\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"\n# Default primary key field type",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "STATIC_URL = \"/static/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"/\")  # 'data' is my media folder\nMEDIA_URL = \"/media/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "MEDIA_URL = \"/media/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",\n    ),",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"django_filters.rest_framework.DjangoFilterBackend\",),\n}\nREST_AUTH_REGISTER_SERIALIZERS = {",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"django_filters.rest_framework.DjangoFilterBackend\",),\n}\nREST_AUTH_REGISTER_SERIALIZERS = {\n    \"REGISTER_SERIALIZER\": \"applications.users.serializers.ExtendedRegisterSerializer\"",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "AUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"django_filters.rest_framework.DjangoFilterBackend\",),\n}\nREST_AUTH_REGISTER_SERIALIZERS = {\n    \"REGISTER_SERIALIZER\": \"applications.users.serializers.ExtendedRegisterSerializer\"\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"django_filters.rest_framework.DjangoFilterBackend\",),\n}\nREST_AUTH_REGISTER_SERIALIZERS = {\n    \"REGISTER_SERIALIZER\": \"applications.users.serializers.ExtendedRegisterSerializer\"\n}\nSITE_ID = 1",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "REST_AUTH_REGISTER_SERIALIZERS",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "REST_AUTH_REGISTER_SERIALIZERS = {\n    \"REGISTER_SERIALIZER\": \"applications.users.serializers.ExtendedRegisterSerializer\"\n}\nSITE_ID = 1\nEMAIL_USE_TLS = True\nEMAIL_HOST = \"\"\nEMAIL_PORT = \"\"\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "SITE_ID = 1\nEMAIL_USE_TLS = True\nEMAIL_HOST = \"\"\nEMAIL_PORT = \"\"\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = \"\"\nEMAIL_PORT = \"\"\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "EMAIL_HOST = \"\"\nEMAIL_PORT = \"\"\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "EMAIL_PORT = \"\"\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "EMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"\"\nCELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "CELERY_TIMEZONE = \"Europe/London\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_TRACK_STARTED",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "CELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_TIME_LIMIT",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "CELERY_TASK_TIME_LIMIT = 30 * 60\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "CELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nCELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_BACKEND",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "CELERY_BROKER_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://redis:6379/0\")\nBROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "BROKER_URL",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "BROKER_URL = \"django://\"\nCELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "CELERY_BEAT_SCHEDULE",
        "kind": 5,
        "importPath": "backend.settings.common",
        "description": "backend.settings.common",
        "peekOfCode": "CELERY_BEAT_SCHEDULE = {\n    \"send_emails\": {\"task\": \"core.tasks.send_emails\", \"schedule\": 10}\n}",
        "detail": "backend.settings.common",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"postgres\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"postgres\",\n        \"HOST\": \"db\",\n        \"PORT\": 5432,",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "ALLOWED_HOSTS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"postgres\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"postgres\",\n        \"HOST\": \"db\",\n        \"PORT\": 5432,\n    }",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"postgres\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"postgres\",\n        \"HOST\": \"db\",\n        \"PORT\": 5432,\n    }\n}",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "EMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.settings.dev",
        "description": "backend.settings.dev",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.dev",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": 5432,",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "ALLOWED_HOSTS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": 5432,\n    }",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": 5432,\n    }\n}",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "EMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.settings.prod",
        "description": "backend.settings.prod",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.prod",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"test\",\n        \"USER\": \"test\",\n        \"PASSWORD\": \"test\",\n        \"HOST\": \"test_db\",\n        \"PORT\": 5432,",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "ALLOWED_HOSTS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"test\",\n        \"USER\": \"test\",\n        \"PASSWORD\": \"test\",\n        \"HOST\": \"test_db\",\n        \"PORT\": 5432,\n    }",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"test\",\n        \"USER\": \"test\",\n        \"PASSWORD\": \"test\",\n        \"HOST\": \"test_db\",\n        \"PORT\": 5432,\n    }\n}",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "EMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.settings.test",
        "description": "backend.settings.test",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"\"",
        "detail": "backend.settings.test",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.asgi",
        "description": "backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.celery",
        "description": "backend.celery",
        "peekOfCode": "app = Celery(\"backend\")\napp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\napp.autodiscover_tasks()",
        "detail": "backend.celery",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"api/auth/\", include(\"applications.users.urls\")),\n    path(\"api/core/\", include(\"applications.core.urls\")),\n    path(\"api/tickets/\", include(\"applications.tickets.urls\")),\n    path(\"admin/\", admin.site.urls),\n]",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.wsgi",
        "description": "backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.wsgi",
        "documentation": {}
    },
    {
        "label": "dev",
        "kind": 2,
        "importPath": "scripts.entrypoints",
        "description": "scripts.entrypoints",
        "peekOfCode": "def dev():\n    return _run(\"./scripts/bash/dev.sh\")\ndef test():\n    return _run(\"./scripts/bash/test.sh\")\ndef test_dev():\n    return _run(\"./scripts/bash/test-dev.sh\")\ndef lint():\n    return _run(\"./scripts/bash/lint.sh\")",
        "detail": "scripts.entrypoints",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "scripts.entrypoints",
        "description": "scripts.entrypoints",
        "peekOfCode": "def test():\n    return _run(\"./scripts/bash/test.sh\")\ndef test_dev():\n    return _run(\"./scripts/bash/test-dev.sh\")\ndef lint():\n    return _run(\"./scripts/bash/lint.sh\")",
        "detail": "scripts.entrypoints",
        "documentation": {}
    },
    {
        "label": "test_dev",
        "kind": 2,
        "importPath": "scripts.entrypoints",
        "description": "scripts.entrypoints",
        "peekOfCode": "def test_dev():\n    return _run(\"./scripts/bash/test-dev.sh\")\ndef lint():\n    return _run(\"./scripts/bash/lint.sh\")",
        "detail": "scripts.entrypoints",
        "documentation": {}
    },
    {
        "label": "lint",
        "kind": 2,
        "importPath": "scripts.entrypoints",
        "description": "scripts.entrypoints",
        "peekOfCode": "def lint():\n    return _run(\"./scripts/bash/lint.sh\")",
        "detail": "scripts.entrypoints",
        "documentation": {}
    },
    {
        "label": "pytest_configure",
        "kind": 2,
        "importPath": "test.conftest",
        "description": "test.conftest",
        "peekOfCode": "def pytest_configure(config):\n    mixer.register(\n        \"core.Event\",\n        location=lambda: Point(\n            float(mixer.faker.latitude()),\n            float(mixer.faker.longitude()),\n        ),\n    )",
        "detail": "test.conftest",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    env = os.environ.get(\"DJANGO_ENV\", \"dev\")\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", f\"backend.settings.{env}\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"",
        "detail": "manage",
        "documentation": {}
    }
]